package codcivic.vinebusu.dto;

import org.greenrobot.greendao.DaoException;
import org.greenrobot.greendao.annotation.Entity;
import org.greenrobot.greendao.annotation.Generated;
import org.greenrobot.greendao.annotation.Id;
import org.greenrobot.greendao.annotation.ToOne;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "ROUTE_DTO".
 */
@Entity(active = true)
public class RouteDto {
    private String agencyId;

    @Id
    private String routeId;
    private String routeShortName;
    private String routeLongName;
    private String routeType;
    private String routeUrl;
    private String stopId;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient RouteDtoDao myDao;

    @ToOne(joinProperty = "agencyId")
    private AgencyDto agencyDto;

    @Generated
    private transient String agencyDto__resolvedKey;

    @Generated
    public RouteDto() {
    }

    public RouteDto(String routeId) {
        this.routeId = routeId;
    }

    @Generated
    public RouteDto(String agencyId, String routeId, String routeShortName, String routeLongName, String routeType, String routeUrl, String stopId) {
        this.agencyId = agencyId;
        this.routeId = routeId;
        this.routeShortName = routeShortName;
        this.routeLongName = routeLongName;
        this.routeType = routeType;
        this.routeUrl = routeUrl;
        this.stopId = stopId;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getRouteDtoDao() : null;
    }

    public String getAgencyId() {
        return agencyId;
    }

    public void setAgencyId(String agencyId) {
        this.agencyId = agencyId;
    }

    public String getRouteId() {
        return routeId;
    }

    public void setRouteId(String routeId) {
        this.routeId = routeId;
    }

    public String getRouteShortName() {
        return routeShortName;
    }

    public void setRouteShortName(String routeShortName) {
        this.routeShortName = routeShortName;
    }

    public String getRouteLongName() {
        return routeLongName;
    }

    public void setRouteLongName(String routeLongName) {
        this.routeLongName = routeLongName;
    }

    public String getRouteType() {
        return routeType;
    }

    public void setRouteType(String routeType) {
        this.routeType = routeType;
    }

    public String getRouteUrl() {
        return routeUrl;
    }

    public void setRouteUrl(String routeUrl) {
        this.routeUrl = routeUrl;
    }

    public String getStopId() {
        return stopId;
    }

    public void setStopId(String stopId) {
        this.stopId = stopId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public AgencyDto getAgencyDto() {
        String __key = this.agencyId;
        if (agencyDto__resolvedKey == null || agencyDto__resolvedKey != __key) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AgencyDtoDao targetDao = daoSession.getAgencyDtoDao();
            AgencyDto agencyDtoNew = targetDao.load(__key);
            synchronized (this) {
                agencyDto = agencyDtoNew;
            	agencyDto__resolvedKey = __key;
            }
        }
        return agencyDto;
    }

    @Generated
    public void setAgencyDto(AgencyDto agencyDto) {
        synchronized (this) {
            this.agencyDto = agencyDto;
            agencyId = agencyDto == null ? null : agencyDto.getAgencyId();
            agencyDto__resolvedKey = agencyId;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
