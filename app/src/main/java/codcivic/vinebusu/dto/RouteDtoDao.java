package codcivic.vinebusu.dto;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import java.util.ArrayList;
import java.util.List;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ROUTE_DTO".
*/
public class RouteDtoDao extends AbstractDao<RouteDto, String> {

    public static final String TABLENAME = "ROUTE_DTO";

    /**
     * Properties of entity RouteDto.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property AgencyId = new Property(0, String.class, "agencyId", false, "AGENCY_ID");
        public final static Property RouteId = new Property(1, String.class, "routeId", true, "ROUTE_ID");
        public final static Property RouteShortName = new Property(2, String.class, "routeShortName", false, "ROUTE_SHORT_NAME");
        public final static Property RouteLongName = new Property(3, String.class, "routeLongName", false, "ROUTE_LONG_NAME");
        public final static Property RouteType = new Property(4, String.class, "routeType", false, "ROUTE_TYPE");
        public final static Property RouteUrl = new Property(5, String.class, "routeUrl", false, "ROUTE_URL");
        public final static Property StopId = new Property(6, String.class, "stopId", false, "STOP_ID");
    };

    private DaoSession daoSession;

    private Query<RouteDto> stopDto_RouteDtoListQuery;

    public RouteDtoDao(DaoConfig config) {
        super(config);
    }
    
    public RouteDtoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ROUTE_DTO\" (" + //
                "\"AGENCY_ID\" TEXT," + // 0: agencyId
                "\"ROUTE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 1: routeId
                "\"ROUTE_SHORT_NAME\" TEXT," + // 2: routeShortName
                "\"ROUTE_LONG_NAME\" TEXT," + // 3: routeLongName
                "\"ROUTE_TYPE\" TEXT," + // 4: routeType
                "\"ROUTE_URL\" TEXT," + // 5: routeUrl
                "\"STOP_ID\" TEXT);"); // 6: stopId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ROUTE_DTO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RouteDto entity) {
        stmt.clearBindings();
 
        String agencyId = entity.getAgencyId();
        if (agencyId != null) {
            stmt.bindString(1, agencyId);
        }
 
        String routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindString(2, routeId);
        }
 
        String routeShortName = entity.getRouteShortName();
        if (routeShortName != null) {
            stmt.bindString(3, routeShortName);
        }
 
        String routeLongName = entity.getRouteLongName();
        if (routeLongName != null) {
            stmt.bindString(4, routeLongName);
        }
 
        String routeType = entity.getRouteType();
        if (routeType != null) {
            stmt.bindString(5, routeType);
        }
 
        String routeUrl = entity.getRouteUrl();
        if (routeUrl != null) {
            stmt.bindString(6, routeUrl);
        }
 
        String stopId = entity.getStopId();
        if (stopId != null) {
            stmt.bindString(7, stopId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RouteDto entity) {
        stmt.clearBindings();
 
        String agencyId = entity.getAgencyId();
        if (agencyId != null) {
            stmt.bindString(1, agencyId);
        }
 
        String routeId = entity.getRouteId();
        if (routeId != null) {
            stmt.bindString(2, routeId);
        }
 
        String routeShortName = entity.getRouteShortName();
        if (routeShortName != null) {
            stmt.bindString(3, routeShortName);
        }
 
        String routeLongName = entity.getRouteLongName();
        if (routeLongName != null) {
            stmt.bindString(4, routeLongName);
        }
 
        String routeType = entity.getRouteType();
        if (routeType != null) {
            stmt.bindString(5, routeType);
        }
 
        String routeUrl = entity.getRouteUrl();
        if (routeUrl != null) {
            stmt.bindString(6, routeUrl);
        }
 
        String stopId = entity.getStopId();
        if (stopId != null) {
            stmt.bindString(7, stopId);
        }
    }

    @Override
    protected final void attachEntity(RouteDto entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public RouteDto readEntity(Cursor cursor, int offset) {
        RouteDto entity = new RouteDto( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // agencyId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // routeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // routeShortName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // routeLongName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // routeType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // routeUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // stopId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RouteDto entity, int offset) {
        entity.setAgencyId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRouteId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRouteShortName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRouteLongName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setRouteType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRouteUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setStopId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final String updateKeyAfterInsert(RouteDto entity, long rowId) {
        return entity.getRouteId();
    }
    
    @Override
    public String getKey(RouteDto entity) {
        if(entity != null) {
            return entity.getRouteId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "routeDtoList" to-many relationship of StopDto. */
    public List<RouteDto> _queryStopDto_RouteDtoList(String stopId) {
        synchronized (this) {
            if (stopDto_RouteDtoListQuery == null) {
                QueryBuilder<RouteDto> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.StopId.eq(null));
                stopDto_RouteDtoListQuery = queryBuilder.build();
            }
        }
        Query<RouteDto> query = stopDto_RouteDtoListQuery.forCurrentThread();
        query.setParameter(0, stopId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getAgencyDtoDao().getAllColumns());
            builder.append(" FROM ROUTE_DTO T");
            builder.append(" LEFT JOIN AGENCY_DTO T0 ON T.\"AGENCY_ID\"=T0.\"AGENCY_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected RouteDto loadCurrentDeep(Cursor cursor, boolean lock) {
        RouteDto entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        AgencyDto agencyDto = loadCurrentOther(daoSession.getAgencyDtoDao(), cursor, offset);
        entity.setAgencyDto(agencyDto);

        return entity;    
    }

    public RouteDto loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<RouteDto> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<RouteDto> list = new ArrayList<RouteDto>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<RouteDto> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<RouteDto> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
